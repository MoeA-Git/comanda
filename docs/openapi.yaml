openapi: 3.1.0
info:
  title: Comanda API
  description: Collection for testing Comanda server API endpoints
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Success:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        message:
          type: string
      required:
        - success

    Error:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string
      required:
        - success
        - error

    Provider:
      type: object
      properties:
        name:
          type: string
          description: Provider name (e.g., openai)
        apiKey:
          type: string
          description: Provider API key
        models:
          type: array
          items:
            type: string
          description: List of enabled models
        enabled:
          type: boolean
          description: Whether the provider is enabled
      required:
        - name
        - apiKey
        - models
        - enabled

    ProviderList:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        providers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              models:
                type: array
                items:
                  type: string
              enabled:
                type: boolean
      required:
        - success
        - providers

    EncryptionRequest:
      type: object
      properties:
        password:
          type: string
          description: Password for encryption/decryption
      required:
        - password

    FileOperation:
      type: object
      properties:
        path:
          type: string
          description: File path
        content:
          type: string
          description: File content
      required:
        - path
        - content

    FileMetadata:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        size:
          type: integer
        isDir:
          type: boolean
        createdAt:
          type: string
          format: date-time
        modifiedAt:
          type: string
          format: date-time
        methods:
          type: string
          description: Supported HTTP methods (GET/POST for YAML files)
      required:
        - name
        - path
        - size
        - isDir
        - createdAt
        - modifiedAt

    FileList:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileMetadata'
      required:
        - success
        - files

    BulkFileOperation:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileOperation'
      required:
        - files

    BulkFileDelete:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
          description: List of file paths to delete
      required:
        - files

    RestoreBackup:
      type: object
      properties:
        backup:
          type: string
          description: Backup file name (e.g., backup-20240321-100000.zip)
      required:
        - backup

    ProcessRequest:
      type: object
      properties:
        input:
          type: string
          description: Input for YAML processing (required for POST requests)
        streaming:
          type: boolean
          description: |
            Enable real-time output streaming using Server-Sent Events (SSE).
            When true, the response will be in text/event-stream format with the following event types:
            - data: Regular output data
            - progress: Progress updates
            - spinner: Spinner/loading status updates
            - complete: Processing completion message
            - error: Error messages
            - heartbeat: Connection keep-alive signals
      required:
        - input

    StepInfo:
      type: object
      description: Information about a processing step
      properties:
        name:
          type: string
          description: Name of the step
        model:
          type: string
          description: Model being used
        action:
          type: string
          description: Action being performed
      required:
        - name
        - model
        - action

    ProgressData:
      type: object
      description: Progress update data structure
      properties:
        message:
          type: string
          description: Progress message
        step:
          $ref: '#/components/schemas/StepInfo'
          description: Step information (if available)
      required:
        - message

    SSEEvent:
      type: object
      description: Server-Sent Event structure
      properties:
        event:
          type: string
          enum: [data, progress, complete, error, heartbeat]
          description: Type of SSE event
        data:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/ProgressData'
          description: Event payload (string for simple events, object for progress updates)
      required:
        - event
        - data
      examples:
        progress:
          value:
            event: progress
            data:
              message: "Processing step 1/1: o1-mini"
              step:
                name: "o1-mini"
                model: "o1-mini"
                action: "You are a quantum observer..."
        complete:
          value:
            event: complete
            data:
              message: "Workflow processing completed successfully"
              step:
                name: "o1-mini"
                model: "o1-mini"
                action: "You are a quantum observer..."
        error:
          value:
            event: error
            data: {"error": "Model failed to respond"}
        heartbeat:
          value: ": heartbeat"

security:
  - BearerAuth: []

paths:
  /providers:
    get:
      summary: List Providers
      responses:
        '200':
          description: List of providers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update Provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
            example:
              name: openai
              apiKey: your-api-key
              models: [gpt-4, gpt-3.5-turbo]
              enabled: true
      responses:
        '200':
          description: Provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /providers/{provider_name}:
    delete:
      summary: Delete Provider
      parameters:
        - name: provider_name
          in: path
          required: true
          schema:
            type: string
          example: openai
      responses:
        '200':
          description: Provider deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /env/encrypt:
    post:
      summary: Encrypt Environment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionRequest'
            example:
              password: your-password
      responses:
        '200':
          description: Environment encrypted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /env/decrypt:
    post:
      summary: Decrypt Environment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionRequest'
            example:
              password: your-password
      responses:
        '200':
          description: Environment decrypted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /list:
    get:
      summary: List Files
      responses:
        '200':
          description: List of files retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files:
    post:
      summary: Create File
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileOperation'
            example:
              path: example.yaml
              content: your file content
      responses:
        '200':
          description: File created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update File
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
          example: example.yaml
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Updated file content
              required:
                - content
            example:
              content: updated content
      responses:
        '200':
          description: File updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete File
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
          example: example.yaml
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/bulk:
    post:
      summary: Bulk Create Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkFileOperation'
            example:
              files:
                - path: example1.yaml
                  content: content 1
                - path: example2.yaml
                  content: content 2
      responses:
        '200':
          description: Files created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Bulk Update Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkFileOperation'
            example:
              files:
                - path: example1.yaml
                  content: updated content 1
                - path: example2.yaml
                  content: updated content 2
      responses:
        '200':
          description: Files updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Bulk Delete Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkFileDelete'
            example:
              files: [example1.yaml, example2.yaml]
      responses:
        '200':
          description: Files deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/backup:
    post:
      summary: Create Backup
      responses:
        '200':
          description: Backup created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/restore:
    post:
      summary: Restore Backup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreBackup'
            example:
              backup: backup-20240321-100000.zip
      responses:
        '200':
          description: Backup restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/upload:
    post:
      summary: Upload File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                path:
                  type: string
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/content:
    get:
      summary: Get File Content
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content retrieved successfully
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/download:
    get:
      summary: Download File
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Server Health Check
      responses:
        '200':
          description: Server health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  statusCode:
                    type: integer
                  response:
                    type: string
                required:
                  - success
                  - message
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /process:
    post:
      summary: Process YAML File by Path
      description: |
        Process a YAML file by path with required input and optional real-time output streaming.
        YAML processing is only available via POST requests.
        
        When streaming is enabled (streaming=true):
        - Response will be in Server-Sent Events (SSE) format
        - Client must set Accept: text/event-stream header
        - Server will send various event types:
          * data: Regular output data
          * progress: Processing progress updates
          * spinner: Loading/status indicators
          * complete: Final completion message
          * error: Error information
          * heartbeat: Keep-alive signals (every 15s)
        
        Example SSE events:
        ```
        event: progress
        data: Loading model...

        event: spinner
        data: Processing input...

        event: data
        data: Generated content here...

        event: complete
        data: Processing completed successfully

        event: error
        data: {"error": "Model failed to respond"}

        : heartbeat
        ```
        
        Note: GET method is no longer supported - all processing must be done via POST.
      parameters:
        - name: filename
          in: query
          required: true
          schema:
            type: string
          description: Path to the YAML file to process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRequest'
            example:
              input: "your input here"
              streaming: true  # Enable SSE streaming
      responses:
        '200':
          description: |
            When streaming is false:
              Returns processed YAML content as JSON
            When streaming is true:
              Returns Server-Sent Events stream with real-time processing output
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  output:
                    type: string
                required:
                  - success
                  - output
            text/event-stream:
              schema:
                $ref: '#/components/schemas/SSEEvent'
              examples:
                progress:
                  value: |
                    event: progress
                    data: Loading model...

                spinner:
                  value: |
                    event: spinner
                    data: Processing input...

                data:
                  value: |
                    event: data
                    data: Generated content here...

                complete:
                  value: |
                    event: complete
                    data: Processing completed successfully

                error:
                  value: |
                    event: error
                    data: {"error": "Model failed to respond"}

                heartbeat:
                  value: |
                    : heartbeat
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '405':
          description: Method not allowed (only POST is supported)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: "YAML processing is only available via POST requests. Please use POST with your YAML content."
